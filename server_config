#!/bin/bash
##################################################################
## Server for Ubuntu
## 安装这些 server 时,要注意版本,按tab可以查看软件源支持的最高版
## 5. PHP Mysql Nginx PHPMyAdmin  基本上按这个来就行了
##################################################################
whereis softname  # 查看配置文件和安装目录
dpkg -l | grep libevent  # 看 libevent 是否已经安装
dpdk -S softname  # 查看具体安装位置
sudo apt-cache search php | grep php-  # 查看有那些可以安装
nmapme  # 自定义查看自己电脑开了哪些服务
systemctl start mariadb  # stop restart # 启动 MariaDB, 不用 sudo
service mysql start  # 启动 mariadb
sudo systemctl disable mysql.service  # enable  # 开机不启动 MariaDB, 一定要加 sudo
systemctl status nginx.service  # 查看运行故障
locate mongodb  # 查看软件安装位置
sudo ufw deny smtp  # 关闭 SMTP邮件 服务
ss -ant  # 和 netstat 功能差不多, 但更好, 查看端口占用情况
##################################################################
## Server for CentOS
chkconfig php-fpm on  # 开机启动

##################################################################
## 1. mariadb Ubuntu port: 3306 password: root(default for root)
##################################################################
sudo apt-get install mariadb-server mariadb-client mariadb-common php-mysql  # 不要用 mysql-server
# /etc/mysql/mysql.conf.d/mysqld.cnf # 配置文件地址
# bind-address = 127.0.0.1  # 找到此内容并且注释,就可以通过远程访问了, 还是不注释, 非生产环境都用root做密码
sudo mysqladmin -u root password "root"  # 修改密码
sudo /etc/init.d/mysql stop  # sudo service mysql stop  # 两个命令都可以停止
sudo mysql -u root -p  # 接着输入密码启动, 命令都是 mysql 的, 只是提示符变了
##################################################################
## 1. mariadb CentOS
yum install mariadb-server mariadb  # CentOS 7.0+ 不支持 mysql 换成了 mariadb  # 不写sudo是因为在服务器上
# /etc/my.cnf 是配置文件

##################################################################
## 1.1 MongoDB Ubuntu
##################################################################
sudo apt-get install mongodb  # clients 和 server 就同时安装好了, 默认不会开机启动, 所以每次
sudo service mongodb start/stop  # 开启/关闭 数据库
sudo mkdir data/db  # 默认读取位置, 需要自己创建, 否则需要自己指定, 见下面
/var/log/mongodb/mongodb.log  # 日志路径
mongo # 启动
mongod --dbpath /var/lib/mongodb/ --logpath /var/log/mongodb/mongodb.log --logappend &
# --dbpath：指定mongo的数据库文件在哪个文件夹
# --logpath：指定mongo的log日志是哪个，这里log一定要指定到具体的文件名
# --logappend：表示log的写入是采用附加的方式，默认的是覆盖之前的文件
# &：表示程序在后台运行
sudo vim /etc/mongodb.conf  # bind_ip = 127.0.0.1 这句话没有注释的话, 只允许本地

##################################################################
## 1.2 Memcached Ubuntu 11211
##################################################################
sudo apt-get install memcached  # libevent 和 Memcached 一起被安装，无需另行安装 libevent
find / -name 'libevent*' | grep libevent  # 确认 libevent 是否被安装
find / -name 'memcached*' | grep memcached
memcached -d -m 256 -u root -l localhost -c 256 -P /tmp/memcached.pid  # 开启, 显示 Connected to 127.0.0.1. Escape character is '^]', 就行了
# d 启动一个守护进程; m 指定最大使用内存大小,默认值64 MB; u root用户使用; l 绑定地址; c 最大同时连接数; p 将PID写入文件,这样可以使得后边进行快速进程终止,需要与-d 一起使用
telnet localhost 11211  # 默认开的是 11211 端口

##################################################################
## 1.3 Redis Ubuntu 6379
##################################################################
sudo apt-get install redis-server
sudo service redis-server start  # 开启服务器
redis-cli  # 进入命令行客户端, 当已经设置了密码时, 这样进去是没有任何权限的, 具体参考 jTempalte

##################################################################
## 1.4 Sqlite Ubuntu
##################################################################
sudo apt install sqlite sqlite3  # sqlite3, 独立程序用来查询和管理SQLite数据库文件  # sqlite 不需要服务器
sqlite  # 进入命令行

##################################################################
## 2. php phpmyadmin Ubuntu
##################################################################
sudo apt-get install php php-dev php-fpm php-mysql  # 用 mysql_connect() 时需要这个, mysqli_connect() 就不需要 # mysqli_*() is the modern way to access a MySQL database via PHP.
sudo apt-get install phpmyadmin  # 中间进入图形界面选择, 密码 root
sudo ln -s /usr/share/phpmyadmin /home/coder352/web/phpmyadmin  # 我把Nginx的目录设为了 ~/web
sudo apt-get install php-memcache php-memcached  # memcached 要比 memcache 高级一些
vim /etc/php/7.0/cli/php.ini  # 添加 extension='memcached.so', 这样才能支持上面的 php-memcached, 不用重启php
##################################################################
## 2. php phpmyadmin CentOS
yum install php php-mysql php-fpm
# 解决 php 安全威胁
vi /etc/php.ini
```cgi.fix_pathinfo=0```
# 如此PHP的只會處理確切位置的檔案，一來加快速度二來更安全，修改完後重新啟動PHP：
# 配置 php-fpm
vi /etc/php-fpm.d/www.conf
```
listen = /var/run/php-fpm/php-fpm.sock
listen.owner = nobody
listen.group = nobody
user = nginx
group = nginx
```

##################################################################
## 3. Nginx Ubuntu
##################################################################
sudo apt-get install nginx
##################################################################
## 3. Nginx CentOS
yum install epel-release
yum install nginx
# 设置开机启动
service httpd stop
chkconfig httpd off
service nginx start
chkconfig nginx on
# 配置 nginx 解析 php
vi /etc/nginx/conf.d/default.conf  # 或者
vim /etc/nginx/nginx.conf
```
# 大概是这样的, 注意 php 那段
server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;
    root         /usr/share/nginx/html;
    index index.php index.html index.htm;

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    location / {
    }
    location ~ \.php$ {
	#    root           html;
	    try_files $uri =404;
	    fastcgi_pass  unix:/var/run/php-fpm/php-fpm.sock;
	    fastcgi_index  index.php;
	    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	    include        fastcgi_params;
	}
    error_page 404 /404.html;
        location = /40x.html {
    }
    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
}
```
# 重启
service nginx reload
# 关闭
nginx -s stop
nginx -s qiut
service nginx stop

##################################################################
## 4. xampp
##################################################################
chmod 777 xampp.run && ./xampp.run
sudo /opt/lampp/lampp stop/start/restart
sudo /opt/lampp/lampp startapache  # 至启动单个的,其它一次类推
sudo /opt/lampp/lampp security  # 为各种软件设置密码 root root
http://115.28.247.19/phpmyadmin/  # phpmyadmin username: xampp passwd: root
/opt/lampp/htdocs/  # 网站根目录
/opt/lampp/etc/httpd.conf  # apache 配置文件
/opt/lampp/etc/my.cnf  # mysql 配置文件
/opt/lampp/etc/php.ini  # php 配置文件
/opt/lampp/etc/proftpd.conf  # proftpd 配置文件
/opt/lampp/phpmyadmin/config.inc.php  # phpmyadmin 配置文件
# 卸载
sudo /opt/lampp/lampp stop
sudo rm -rf /opt/lampp

##################################################################
## 5. DVWA
##################################################################
# 解压到网站根目录下
/opt/lampp/htdocs/DVWA/config/config.inc.php  # 配置文件
# 修改其中的 mysql 密码
# 进入网站, reset -> username: admin; passwd: passwd
# 正常情况下,可以在 mysql中看到五个users
chmod 777 DVWA  # 修改目录的权限

##################################################################
## 6. sqli-labs
##################################################################
git clone https://github.com/Audi-1/sqli-labs.git jsqli-labs  # 进入网站根目录下载
vim sql-connections/db-creds.inc  # 修改数据库用户名和密码 默认 root root

##################################################################
## 7. ssh
##################################################################
sudo apt-get install openssh-server
sudo vim /etc/ssh/sshd_config

##################################################################
## 8. LAMP Linux Apache Mysql PHP
##################################################################
# 比较简单的方法, 详细的步骤见 jServer/server_config
sudo apt-get update
sudo apt-get install tasksel
sudo tasksel install lamp-server

##################################################################
## 9. Shadowsocks
##################################################################
# 为了更好的性能，VPS 尽量选择 XEN 或 KVM，不要使用 OpenVZ
# Python 版, python 版本的有点慢, 推荐 ShadowsocksR
sudo apt-get install python-pip  # https://github.com/shadowsocks/shadowsocks/wiki 查看教程
pip install shadowsocks  # 或者直接 sudo apt-get install Shadowsocks
sudo ssserver -p 443 -k password -m rc4-md5  # 这个会显示 log 信息
sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start  # 这个是在后台运行

# ShadowsocksR 版, 详细介绍见 github Wiki
git clone -b manyuser https://github.com/breakwa11/shadowsocks.git
cd shadowsocks/shadowsocks  # 单用户版
python server.py -p 443 -k 6IRwnC8Jck -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start  # 后台运行 p 端口 k 密码 m 加密方式 O 协议插件 o 混淆插件
python server.py -d stop/restart  # 停止 / 重启

tail -f /var/log/shadowsocks.log  # 查看日志, 所有版本日志都是在这里
sudo lsof -i -n -P | egrep -c ':443.+ESTABLISHED'  # 假设服务器端口443, 查看连接数
sudo lsof -i -n -P | egrep ':443.+ESTABLISHED'  # 查看连接列表, 看看有几个不同的 IP
